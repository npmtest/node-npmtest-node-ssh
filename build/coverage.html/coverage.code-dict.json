{"/home/travis/build/npmtest/node-npmtest-node-ssh/test.js":"/* istanbul instrument in package npmtest_node_ssh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        switch (local.modeJs) {\n        // re-init local from window.local\n        case 'browser':\n            local = local.global.utility2.objectSetDefault(\n                local.global.utility2_rollup || local.global.local,\n                local.global.utility2\n            );\n            break;\n        // re-init local from example.js\n        case 'node':\n            local = (local.global.utility2_rollup || require('utility2'))\n                .requireReadme();\n            break;\n        }\n        // export local\n        local.global.local = local;\n    }());\n\n\n\n    // run shared js-env code - function\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - function\n    case 'browser':\n        break;\n\n\n\n    // run node js-env code - function\n    case 'node':\n        break;\n    }\n\n\n\n    // run shared js-env code - post-init\n    (function () {\n        return;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // run browser js-env code - post-init\n    case 'browser':\n        local.testCase_browser_nullCase = local.testCase_browser_nullCase || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test browsers's null-case handling-behavior-behavior\n         */\n            onError(null, options);\n        };\n\n        // run tests\n        local.nop(local.modeTest &&\n            document.querySelector('#testRunButton1') &&\n            document.querySelector('#testRunButton1').click());\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        local.testCase_buildApidoc_default = local.testCase_buildApidoc_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApidoc's default handling-behavior-behavior\n         */\n            options = { modulePathList: module.paths };\n            local.buildApidoc(options, onError);\n        };\n\n        local.testCase_buildApp_default = local.testCase_buildApp_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildApp's default handling-behavior-behavior\n         */\n            local.testCase_buildReadme_default(options, local.onErrorThrow);\n            local.testCase_buildLib_default(options, local.onErrorThrow);\n            local.testCase_buildTest_default(options, local.onErrorThrow);\n            local.testCase_buildCustomOrg_default(options, local.onErrorThrow);\n            options = [];\n            local.buildApp(options, onError);\n        };\n\n        local.testCase_buildCustomOrg_default = local.testCase_buildCustomOrg_default ||\n            function (options, onError) {\n            /*\n             * this function will test buildCustomOrg's default handling-behavior\n             */\n                options = {};\n                local.buildCustomOrg(options, onError);\n            };\n\n        local.testCase_buildLib_default = local.testCase_buildLib_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildLib's default handling-behavior\n         */\n            options = {};\n            local.buildLib(options, onError);\n        };\n\n        local.testCase_buildReadme_default = local.testCase_buildReadme_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildReadme's default handling-behavior-behavior\n         */\n            options = {};\n            local.buildReadme(options, onError);\n        };\n\n        local.testCase_buildTest_default = local.testCase_buildTest_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test buildTest's default handling-behavior\n         */\n            options = {};\n            local.buildTest(options, onError);\n        };\n\n        local.testCase_webpage_default = local.testCase_webpage_default || function (\n            options,\n            onError\n        ) {\n        /*\n         * this function will test webpage's default handling-behavior\n         */\n            options = { modeCoverageMerge: true, url: local.serverLocalHost + '?modeTest=1' };\n            local.browserTest(options, onError);\n        };\n\n        // run test-server\n        local.testRunServer(local);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-ssh/lib.npmtest_node_ssh.js":"/* istanbul instrument in package npmtest_node_ssh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || local;\n        // init lib\n        local.local = local.npmtest_node_ssh = local;\n        // init exports\n        if (local.modeJs === 'browser') {\n            local.global.utility2_npmtest_node_ssh = local;\n        } else {\n            module.exports = local;\n            module.exports.__dirname = __dirname;\n            module.exports.module = module;\n        }\n    }());\n}());\n","/home/travis/build/npmtest/node-npmtest-node-ssh/example.js":"/*\nexample.js\n\nquickstart example\n\ninstruction\n    1. save this script as example.js\n    2. run the shell command:\n        $ npm install npmtest-node-ssh && PORT=8081 node example.js\n    3. play with the browser-demo on http://127.0.0.1:8081\n*/\n\n\n\n/* istanbul instrument in package npmtest_node_ssh */\n/*jslint\n    bitwise: true,\n    browser: true,\n    maxerr: 8,\n    maxlen: 96,\n    node: true,\n    nomen: true,\n    regexp: true,\n    stupid: true\n*/\n(function () {\n    'use strict';\n    var local;\n\n\n\n    // run shared js-env code - pre-init\n    (function () {\n        // init local\n        local = {};\n        // init modeJs\n        local.modeJs = (function () {\n            try {\n                return typeof navigator.userAgent === 'string' &&\n                    typeof document.querySelector('body') === 'object' &&\n                    typeof XMLHttpRequest.prototype.open === 'function' &&\n                    'browser';\n            } catch (errorCaughtBrowser) {\n                return module.exports &&\n                    typeof process.versions.node === 'string' &&\n                    typeof require('http').createServer === 'function' &&\n                    'node';\n            }\n        }());\n        // init global\n        local.global = local.modeJs === 'browser'\n            ? window\n            : global;\n        // init utility2_rollup\n        local = local.global.utility2_rollup || (local.modeJs === 'browser'\n            ? local.global.utility2_npmtest_node_ssh\n            : global.utility2_moduleExports);\n        // export local\n        local.global.local = local;\n    }());\n    switch (local.modeJs) {\n\n\n\n    // post-init\n    // run browser js-env code - post-init\n    /* istanbul ignore next */\n    case 'browser':\n        local.testRunBrowser = function (event) {\n            if (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('onreset'))) {\n                // reset output\n                Array.from(\n                    document.querySelectorAll('body > .resettable')\n                ).forEach(function (element) {\n                    switch (element.tagName) {\n                    case 'INPUT':\n                    case 'TEXTAREA':\n                        element.value = '';\n                        break;\n                    default:\n                        element.textContent = '';\n                    }\n                });\n            }\n            switch (event && event.currentTarget && event.currentTarget.id) {\n            case 'testRunButton1':\n                // show tests\n                if (document.querySelector('#testReportDiv1').style.display === 'none') {\n                    document.querySelector('#testReportDiv1').style.display = 'block';\n                    document.querySelector('#testRunButton1').textContent =\n                        'hide internal test';\n                    local.modeTest = true;\n                    local.testRunDefault(local);\n                // hide tests\n                } else {\n                    document.querySelector('#testReportDiv1').style.display = 'none';\n                    document.querySelector('#testRunButton1').textContent = 'run internal test';\n                }\n                break;\n            // custom-case\n            default:\n                break;\n            }\n            if (document.querySelector('#inputTextareaEval1') && (!event || (event &&\n                    event.currentTarget &&\n                    event.currentTarget.className &&\n                    event.currentTarget.className.includes &&\n                    event.currentTarget.className.includes('oneval')))) {\n                // try to eval input-code\n                try {\n                    /*jslint evil: true*/\n                    eval(document.querySelector('#inputTextareaEval1').value);\n                } catch (errorCaught) {\n                    console.error(errorCaught);\n                }\n            }\n        };\n        // log stderr and stdout to #outputTextareaStdout1\n        ['error', 'log'].forEach(function (key) {\n            console[key + '_original'] = console[key];\n            console[key] = function () {\n                var element;\n                console[key + '_original'].apply(console, arguments);\n                element = document.querySelector('#outputTextareaStdout1');\n                if (!element) {\n                    return;\n                }\n                // append text to #outputTextareaStdout1\n                element.value += Array.from(arguments).map(function (arg) {\n                    return typeof arg === 'string'\n                        ? arg\n                        : JSON.stringify(arg, null, 4);\n                }).join(' ') + '\\n';\n                // scroll textarea to bottom\n                element.scrollTop = element.scrollHeight;\n            };\n        });\n        // init event-handling\n        ['change', 'click', 'keyup'].forEach(function (event) {\n            Array.from(document.querySelectorAll('.on' + event)).forEach(function (element) {\n                element.addEventListener(event, local.testRunBrowser);\n            });\n        });\n        // run tests\n        local.testRunBrowser();\n        break;\n\n\n\n    // run node js-env code - post-init\n    /* istanbul ignore next */\n    case 'node':\n        // export local\n        module.exports = local;\n        // require modules\n        local.fs = require('fs');\n        local.http = require('http');\n        local.url = require('url');\n        // init assets\n        local.assetsDict = local.assetsDict || {};\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.index.template.html'] = '\\\n<!doctype html>\\n\\\n<html lang=\"en\">\\n\\\n<head>\\n\\\n<meta charset=\"UTF-8\">\\n\\\n<meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\\n\\\n<title>{{env.npm_package_name}} (v{{env.npm_package_version}})</title>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n    box-sizing: false,\\n\\\n    universal-selector: false\\n\\\n*/\\n\\\n* {\\n\\\n    box-sizing: border-box;\\n\\\n}\\n\\\nbody {\\n\\\n    background: #dde;\\n\\\n    font-family: Arial, Helvetica, sans-serif;\\n\\\n    margin: 2rem;\\n\\\n}\\n\\\nbody > * {\\n\\\n    margin-bottom: 1rem;\\n\\\n}\\n\\\n.utility2FooterDiv {\\n\\\n    margin-top: 20px;\\n\\\n    text-align: center;\\n\\\n}\\n\\\n</style>\\n\\\n<style>\\n\\\n/*csslint\\n\\\n*/\\n\\\ntextarea {\\n\\\n    font-family: monospace;\\n\\\n    height: 10rem;\\n\\\n    width: 100%;\\n\\\n}\\n\\\ntextarea[readonly] {\\n\\\n    background: #ddd;\\n\\\n}\\n\\\n</style>\\n\\\n</head>\\n\\\n<body>\\n\\\n<!-- utility2-comment\\n\\\n<div id=\"ajaxProgressDiv1\" style=\"background: #d00; height: 2px; left: 0; margin: 0; padding: 0; position: fixed; top: 0; transition: background 0.5s, width 1.5s; width: 25%;\"></div>\\n\\\nutility2-comment -->\\n\\\n<h1>\\n\\\n<!-- utility2-comment\\n\\\n    <a\\n\\\n        {{#if env.npm_package_homepage}}\\n\\\n        href=\"{{env.npm_package_homepage}}\"\\n\\\n        {{/if env.npm_package_homepage}}\\n\\\n        target=\"_blank\"\\n\\\n    >\\n\\\nutility2-comment -->\\n\\\n        {{env.npm_package_name}} (v{{env.npm_package_version}})\\n\\\n<!-- utility2-comment\\n\\\n    </a>\\n\\\nutility2-comment -->\\n\\\n</h1>\\n\\\n<h3>{{env.npm_package_description}}</h3>\\n\\\n<!-- utility2-comment\\n\\\n<h4><a download href=\"assets.app.js\">download standalone app</a></h4>\\n\\\n<button class=\"onclick onreset\" id=\"testRunButton1\">run internal test</button><br>\\n\\\n<div id=\"testReportDiv1\" style=\"display: none;\"></div>\\n\\\nutility2-comment -->\\n\\\n\\n\\\n\\n\\\n\\n\\\n<label>stderr and stdout</label>\\n\\\n<textarea class=\"resettable\" id=\"outputTextareaStdout1\" readonly></textarea>\\n\\\n<!-- utility2-comment\\n\\\n{{#if isRollup}}\\n\\\n<script src=\"assets.app.js\"></script>\\n\\\n{{#unless isRollup}}\\n\\\nutility2-comment -->\\n\\\n<script src=\"assets.utility2.rollup.js\"></script>\\n\\\n<script src=\"jsonp.utility2._stateInit?callback=window.utility2._stateInit\"></script>\\n\\\n<script src=\"assets.npmtest_node_ssh.rollup.js\"></script>\\n\\\n<script src=\"assets.example.js\"></script>\\n\\\n<script src=\"assets.test.js\"></script>\\n\\\n<!-- utility2-comment\\n\\\n{{/if isRollup}}\\n\\\nutility2-comment -->\\n\\\n<div class=\"utility2FooterDiv\">\\n\\\n    [ this app was created with\\n\\\n    <a href=\"https://github.com/kaizhu256/node-utility2\" target=\"_blank\">utility2</a>\\n\\\n    ]\\n\\\n</div>\\n\\\n</body>\\n\\\n</html>\\n\\\n';\n        /* jslint-ignore-end */\n        if (local.templateRender) {\n            local.assetsDict['/'] = local.templateRender(\n                local.assetsDict['/assets.index.template.html'],\n                {\n                    env: local.objectSetDefault(local.env, {\n                        npm_package_description: 'the greatest app in the world!',\n                        npm_package_name: 'my-app',\n                        npm_package_nameAlias: 'my_app',\n                        npm_package_version: '0.0.1'\n                    })\n                }\n            );\n        } else {\n            local.assetsDict['/'] = local.assetsDict['/assets.index.template.html']\n                .replace((/\\{\\{env\\.(\\w+?)\\}\\}/g), function (match0, match1) {\n                    // jslint-hack\n                    String(match0);\n                    switch (match1) {\n                    case 'npm_package_description':\n                        return 'the greatest app in the world!';\n                    case 'npm_package_name':\n                        return 'my-app';\n                    case 'npm_package_nameAlias':\n                        return 'my_app';\n                    case 'npm_package_version':\n                        return '0.0.1';\n                    }\n                });\n        }\n        // run the cli\n        if (local.global.utility2_rollup || module !== require.main) {\n            break;\n        }\n        local.assetsDict['/assets.example.js'] =\n            local.assetsDict['/assets.example.js'] ||\n            local.fs.readFileSync(__filename, 'utf8');\n        // bug-workaround - long $npm_package_buildCustomOrg\n        /* jslint-ignore-begin */\n        local.assetsDict['/assets.npmtest_node_ssh.rollup.js'] =\n            local.assetsDict['/assets.npmtest_node_ssh.rollup.js'] ||\n            local.fs.readFileSync(\n                local.npmtest_node_ssh.__dirname + '/lib.npmtest_node_ssh.js',\n                'utf8'\n            ).replace((/^#!/), '//');\n        /* jslint-ignore-end */\n        local.assetsDict['/favicon.ico'] = local.assetsDict['/favicon.ico'] || '';\n        // if $npm_config_timeout_exit exists,\n        // then exit this process after $npm_config_timeout_exit ms\n        if (Number(process.env.npm_config_timeout_exit)) {\n            setTimeout(process.exit, Number(process.env.npm_config_timeout_exit));\n        }\n        // start server\n        if (local.global.utility2_serverHttp1) {\n            break;\n        }\n        process.env.PORT = process.env.PORT || '8081';\n        console.error('server starting on port ' + process.env.PORT);\n        local.http.createServer(function (request, response) {\n            request.urlParsed = local.url.parse(request.url);\n            if (local.assetsDict[request.urlParsed.pathname] !== undefined) {\n                response.end(local.assetsDict[request.urlParsed.pathname]);\n                return;\n            }\n            response.statusCode = 404;\n            response.end();\n        }).listen(process.env.PORT);\n        break;\n    }\n}());\n","/home/travis/build/npmtest/node-npmtest-node-ssh/node_modules/node-ssh/lib/index.js":"'use strict';\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _ssh = require('ssh2');\n\nvar _ssh2 = _interopRequireDefault(_ssh);\n\nvar _assert = require('assert');\n\nvar _assert2 = _interopRequireDefault(_assert);\n\nvar _sbScandir = require('sb-scandir');\n\nvar _sbScandir2 = _interopRequireDefault(_sbScandir);\n\nvar _shellEscape = require('shell-escape');\n\nvar _shellEscape2 = _interopRequireDefault(_shellEscape);\n\nvar _helpers = require('./helpers');\n\nvar Helpers = _interopRequireWildcard(_helpers);\n\nfunction _interopRequireWildcard(obj) { if (obj && obj.__esModule) { return obj; } else { var newObj = {}; if (obj != null) { for (var key in obj) { if (Object.prototype.hasOwnProperty.call(obj, key)) newObj[key] = obj[key]; } } newObj.default = obj; return newObj; } }\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nvar SSH = function () {\n  function SSH() {\n    _classCallCheck(this, SSH);\n\n    this.connection = null;\n  }\n\n  _createClass(SSH, [{\n    key: 'connect',\n    value: function connect(givenConfig) {\n      var _this = this;\n\n      var connection = new _ssh2.default();\n      this.connection = connection;\n      return new Promise(function (resolve) {\n        resolve(Helpers.normalizeConfig(givenConfig));\n      }).then(function (config) {\n        return new Promise(function (resolve, reject) {\n          connection.on('error', reject);\n          connection.on('ready', function () {\n            connection.removeListener('error', reject);\n            resolve(_this);\n          });\n          connection.on('end', function () {\n            if (_this.connection === connection) {\n              _this.connection = null;\n            }\n          });\n          connection.connect(config);\n        });\n      });\n    }\n  }, {\n    key: 'requestShell',\n    value: function () {\n      var _ref = _asyncToGenerator(function* () {\n        var connection = this.connection;\n        (0, _assert2.default)(connection, 'Not connected to server');\n        return new Promise(function (resolve, reject) {\n          connection.shell(Helpers.generateCallback(resolve, reject));\n        });\n      });\n\n      function requestShell() {\n        return _ref.apply(this, arguments);\n      }\n\n      return requestShell;\n    }()\n  }, {\n    key: 'requestSFTP',\n    value: function () {\n      var _ref2 = _asyncToGenerator(function* () {\n        var connection = this.connection;\n        (0, _assert2.default)(connection, 'Not connected to server');\n        return new Promise(function (resolve, reject) {\n          connection.sftp(Helpers.generateCallback(resolve, reject));\n        });\n      });\n\n      function requestSFTP() {\n        return _ref2.apply(this, arguments);\n      }\n\n      return requestSFTP;\n    }()\n  }, {\n    key: 'mkdir',\n    value: function () {\n      var _ref3 = _asyncToGenerator(function* (path) {\n        var _this2 = this;\n\n        var type = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : 'sftp';\n        var givenSftp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n\n        (0, _assert2.default)(this.connection, 'Not connected to server');\n        (0, _assert2.default)(type === 'exec' || type === 'sftp', 'Type should either be sftp or exec');\n        if (type === 'exec') {\n          var output = yield this.exec('mkdir', ['-p', path]);\n          if (output.stdout) {\n            throw new Error(output.stdout);\n          }\n        } else {\n          (0, _assert2.default)(!givenSftp || (typeof givenSftp === 'undefined' ? 'undefined' : _typeof(givenSftp)) === 'object', 'sftp must be an object');\n          var sftp = givenSftp || (yield this.requestSFTP());\n\n          var makeSftpDirectory = function makeSftpDirectory(retry) {\n            return Helpers.mkdirSftp(path, sftp).catch(function (error) {\n              if (retry && error && (error.message === 'No such file' || error.code === 'ENOENT')) {\n                return _this2.mkdir(_path2.default.dirname(path), 'sftp', sftp).then(function () {\n                  return makeSftpDirectory(false);\n                });\n              }\n              throw error;\n            });\n          };\n          try {\n            yield makeSftpDirectory(true);\n          } finally {\n            if (!givenSftp) {\n              sftp.end();\n            }\n          }\n        }\n      });\n\n      function mkdir(_x) {\n        return _ref3.apply(this, arguments);\n      }\n\n      return mkdir;\n    }()\n  }, {\n    key: 'exec',\n    value: function () {\n      var _ref4 = _asyncToGenerator(function* (command) {\n        var parameters = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : [];\n        var options = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        (0, _assert2.default)(this.connection, 'Not connected to server');\n        (0, _assert2.default)((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options, 'options must be an Object');\n        (0, _assert2.default)(!options.cwd || typeof options.cwd === 'string', 'options.cwd must be a string');\n        (0, _assert2.default)(!options.stdin || typeof options.stdin === 'string', 'options.stdin must be a string');\n        (0, _assert2.default)(!options.stream || ['stdout', 'stderr', 'both'].indexOf(options.stream) !== -1, 'options.stream must be among \"stdout\", \"stderr\" and \"both\"');\n        (0, _assert2.default)(!options.options || _typeof(options.options) === 'object', 'options.options must be an object');\n\n        var output = yield this.execCommand([command].concat((0, _shellEscape2.default)(parameters)).join(' '), options);\n        if (!options.stream || options.stream === 'stdout') {\n          if (output.stderr) {\n            throw new Error(output.stderr);\n          }\n          return output.stdout;\n        }\n        if (options.stream === 'stderr') {\n          return output.stderr;\n        }\n        return output;\n      });\n\n      function exec(_x4) {\n        return _ref4.apply(this, arguments);\n      }\n\n      return exec;\n    }()\n  }, {\n    key: 'execCommand',\n    value: function () {\n      var _ref5 = _asyncToGenerator(function* (givenCommand) {\n        var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n\n        var command = givenCommand;\n        var connection = this.connection;\n        (0, _assert2.default)(connection, 'Not connected to server');\n        (0, _assert2.default)((typeof options === 'undefined' ? 'undefined' : _typeof(options)) === 'object' && options, 'options must be an Object');\n        (0, _assert2.default)(!options.cwd || typeof options.cwd === 'string', 'options.cwd must be a string');\n        (0, _assert2.default)(!options.stdin || typeof options.stdin === 'string', 'options.stdin must be a string');\n        (0, _assert2.default)(!options.options || _typeof(options.options) === 'object', 'options.options must be an object');\n\n        if (options.cwd) {\n          // NOTE: Output piping cd command to hide directory non-existent errors\n          command = 'cd ' + (0, _shellEscape2.default)([options.cwd]) + ' 1> /dev/null 2> /dev/null; ' + command;\n        }\n        var output = { stdout: [], stderr: [] };\n        return new Promise(function (resolve, reject) {\n          connection.exec(command, Helpers.generateCallback(function (stream) {\n            stream.on('data', function (chunk) {\n              output.stdout.push(chunk);\n            });\n            stream.stderr.on('data', function (chunk) {\n              output.stderr.push(chunk);\n            });\n            if (options.stdin) {\n              stream.write(options.stdin);\n              stream.end();\n            }\n            stream.on('close', function (code, signal) {\n              resolve({ code: code, signal: signal, stdout: output.stdout.join('').trim(), stderr: output.stderr.join('').trim() });\n            });\n          }, reject), options.options || {});\n        });\n      });\n\n      function execCommand(_x7) {\n        return _ref5.apply(this, arguments);\n      }\n\n      return execCommand;\n    }()\n  }, {\n    key: 'getFile',\n    value: function () {\n      var _ref6 = _asyncToGenerator(function* (localFile, remoteFile) {\n        var givenSftp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var givenOpts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n        (0, _assert2.default)(this.connection, 'Not connected to server');\n        (0, _assert2.default)(typeof localFile === 'string' && localFile, 'localFile must be a string');\n        (0, _assert2.default)(typeof remoteFile === 'string' && remoteFile, 'remoteFile must be a string');\n        (0, _assert2.default)(!givenSftp || (typeof givenSftp === 'undefined' ? 'undefined' : _typeof(givenSftp)) === 'object', 'sftp must be an object');\n        (0, _assert2.default)(!givenOpts || (typeof givenOpts === 'undefined' ? 'undefined' : _typeof(givenOpts)) === 'object', 'opts must be an object');\n\n        var opts = givenOpts || {};\n        var sftp = givenSftp || (yield this.requestSFTP());\n\n        try {\n          yield new Promise(function (resolve, reject) {\n            sftp.fastGet(remoteFile, localFile, opts, Helpers.generateCallback(resolve, reject));\n          });\n        } finally {\n          if (!givenSftp) {\n            sftp.end();\n          }\n        }\n      });\n\n      function getFile(_x9, _x10) {\n        return _ref6.apply(this, arguments);\n      }\n\n      return getFile;\n    }()\n  }, {\n    key: 'putFile',\n    value: function () {\n      var _ref7 = _asyncToGenerator(function* (localFile, remoteFile) {\n        var givenSftp = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n        var givenOpts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n        (0, _assert2.default)(this.connection, 'Not connected to server');\n        (0, _assert2.default)(typeof localFile === 'string' && localFile, 'localFile must be a string');\n        (0, _assert2.default)(typeof remoteFile === 'string' && remoteFile, 'remoteFile must be a string');\n        (0, _assert2.default)(!givenSftp || (typeof givenSftp === 'undefined' ? 'undefined' : _typeof(givenSftp)) === 'object', 'sftp must be an object');\n        (0, _assert2.default)(!givenOpts || (typeof givenOpts === 'undefined' ? 'undefined' : _typeof(givenOpts)) === 'object', 'opts must be an object');\n        (0, _assert2.default)((yield Helpers.exists(localFile)), 'localFile does not exist at ' + localFile);\n\n        var that = this;\n        var opts = givenOpts || {};\n        var sftp = givenSftp || (yield this.requestSFTP());\n\n        function putFile(retry) {\n          return new Promise(function (resolve, reject) {\n            sftp.fastPut(localFile, remoteFile, opts, Helpers.generateCallback(resolve, function (error) {\n              if (error.message === 'No such file' && retry) {\n                resolve(that.mkdir(_path2.default.dirname(remoteFile), 'sftp', sftp).then(function () {\n                  return putFile(false);\n                }));\n              } else {\n                reject(error);\n              }\n            }));\n          });\n        }\n\n        try {\n          yield putFile(true);\n        } finally {\n          if (!givenSftp) {\n            sftp.end();\n          }\n        }\n      });\n\n      function putFile(_x13, _x14) {\n        return _ref7.apply(this, arguments);\n      }\n\n      return putFile;\n    }()\n  }, {\n    key: 'putFiles',\n    value: function () {\n      var _ref8 = _asyncToGenerator(function* (files) {\n        var givenSftp = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : null;\n\n        var _this3 = this;\n\n        var maxAtOnce = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 5;\n        var givenOpts = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n\n        (0, _assert2.default)(this.connection, 'Not connected to server');\n        (0, _assert2.default)(!givenSftp || (typeof givenSftp === 'undefined' ? 'undefined' : _typeof(givenSftp)) === 'object', 'sftp must be an object');\n        (0, _assert2.default)(!givenOpts || (typeof givenOpts === 'undefined' ? 'undefined' : _typeof(givenOpts)) === 'object', 'opts must be an object');\n        (0, _assert2.default)(Array.isArray(files), 'files must be an array');\n        (0, _assert2.default)(typeof maxAtOnce === 'number' && Number.isFinite(maxAtOnce), 'maxAtOnce must be a valid number');\n\n        for (var i = 0, length = files.length; i < length; ++i) {\n          var file = files[i];\n          (0, _assert2.default)(file, 'files items must be valid objects');\n          (0, _assert2.default)(file.local && typeof file.local === 'string', 'files[' + i + '].local must be a string');\n          (0, _assert2.default)(file.remote && typeof file.remote === 'string', 'files[' + i + '].remote must be a string');\n        }\n\n        var opts = givenOpts || {};\n        var sftp = givenSftp || (yield this.requestSFTP());\n        var transferred = [];\n\n        try {\n          for (var _i = 0, _length = Math.ceil(files.length / maxAtOnce); _i < _length; _i++) {\n            var index = _i * maxAtOnce;\n            var chunk = files.slice(index, index + maxAtOnce);\n            yield Promise.all(chunk.map(function (file) {\n              return _this3.putFile(file.local, file.remote, sftp, opts);\n            }));\n            transferred = transferred.concat(chunk);\n          }\n        } catch (error) {\n          error.transferred = transferred;\n          throw error;\n        } finally {\n          if (!sftp) {\n            sftp.end();\n          }\n        }\n      });\n\n      function putFiles(_x17) {\n        return _ref8.apply(this, arguments);\n      }\n\n      return putFiles;\n    }()\n  }, {\n    key: 'putDirectory',\n    value: function () {\n      var _ref9 = _asyncToGenerator(function* (localDirectory, remoteDirectory) {\n        var givenConfig = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n\n        var _this4 = this;\n\n        var givenSftp = arguments.length > 3 && arguments[3] !== undefined ? arguments[3] : null;\n        var givenOpts = arguments.length > 4 && arguments[4] !== undefined ? arguments[4] : null;\n\n        (0, _assert2.default)(this.connection, 'Not connected to server');\n        (0, _assert2.default)(typeof localDirectory === 'string' && localDirectory, 'localDirectory must be a string');\n        (0, _assert2.default)(typeof remoteDirectory === 'string' && remoteDirectory, 'localDirectory must be a string');\n        (0, _assert2.default)((yield Helpers.exists(localDirectory)), 'localDirectory does not exist at ' + localDirectory);\n        (0, _assert2.default)((yield Helpers.stat(localDirectory)).isDirectory(), 'localDirectory is not a directory at ' + localDirectory);\n        (0, _assert2.default)((typeof givenConfig === 'undefined' ? 'undefined' : _typeof(givenConfig)) === 'object' && givenConfig, 'config must be an object');\n        (0, _assert2.default)(!givenSftp || (typeof givenSftp === 'undefined' ? 'undefined' : _typeof(givenSftp)) === 'object', 'sftp must be an object');\n        (0, _assert2.default)(!givenOpts || (typeof givenOpts === 'undefined' ? 'undefined' : _typeof(givenOpts)) === 'object', 'opts must be an object');\n\n        var opts = givenOpts || {};\n        var sftp = givenSftp || (yield this.requestSFTP());\n        var config = Helpers.normalizePutDirectoryConfig(givenConfig);\n        var files = (yield (0, _sbScandir2.default)(localDirectory, config.recursive, config.validate)).map(function (i) {\n          return _path2.default.relative(localDirectory, i);\n        });\n        var directoriesCreated = new Set();\n        var directoriesQueue = Promise.resolve();\n\n        // eslint-disable-next-line arrow-parens\n        var promises = files.map(function () {\n          var _ref10 = _asyncToGenerator(function* (file) {\n            var localFile = _path2.default.join(localDirectory, file);\n            var remoteFile = _path2.default.join(remoteDirectory, file).split(_path2.default.sep).join('/');\n            var remoteFileDirectory = _path2.default.dirname(remoteFile);\n            if (!directoriesCreated.has(remoteFileDirectory)) {\n              directoriesCreated.add(remoteFileDirectory);\n              directoriesQueue = directoriesQueue.then(function () {\n                return _this4.mkdir(remoteFileDirectory, 'sftp', sftp);\n              });\n              yield directoriesQueue;\n            }\n            try {\n              yield _this4.putFile(localFile, remoteFile, sftp, opts);\n              config.tick(localFile, remoteFile, null);\n              return true;\n            } catch (_) {\n              config.tick(localFile, remoteFile, _);\n              return false;\n            }\n          });\n\n          return function (_x26) {\n            return _ref10.apply(this, arguments);\n          };\n        }());\n\n        var results = void 0;\n        try {\n          results = yield Promise.all(promises);\n        } finally {\n          if (!givenSftp) {\n            sftp.end();\n          }\n        }\n\n        return results.every(function (i) {\n          return i;\n        });\n      });\n\n      function putDirectory(_x21, _x22) {\n        return _ref9.apply(this, arguments);\n      }\n\n      return putDirectory;\n    }()\n  }, {\n    key: 'dispose',\n    value: function dispose() {\n      if (this.connection) {\n        this.connection.end();\n      }\n    }\n  }]);\n\n  return SSH;\n}();\n\nmodule.exports = SSH;","/home/travis/build/npmtest/node-npmtest-node-ssh/node_modules/node-ssh/lib/helpers.js":"'use strict';\n\nObject.defineProperty(exports, \"__esModule\", {\n  value: true\n});\nexports.normalizeConfig = exports.mkdirSftp = exports.readdir = exports.stat = undefined;\n\nvar _typeof = typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\" ? function (obj) { return typeof obj; } : function (obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; };\n\nvar mkdirSftp = exports.mkdirSftp = function () {\n  var _ref = _asyncToGenerator(function* (path, sftp) {\n    var stats = void 0;\n    try {\n      stats = yield (0, _sbPromisify2.default)(sftp.stat).call(sftp, path);\n    } catch (_) {/* No Op */}\n    if (stats) {\n      if (stats.isDirectory()) {\n        // Already exists, nothing to worry about\n        return;\n      }\n      throw new Error('mkdir() failed, target already exists and is not a directory');\n    }\n    try {\n      yield (0, _sbPromisify2.default)(sftp.mkdir).call(sftp, path);\n    } catch (error) {\n      throw transformError(error);\n    }\n  });\n\n  return function mkdirSftp(_x, _x2) {\n    return _ref.apply(this, arguments);\n  };\n}();\n\nvar normalizeConfig = exports.normalizeConfig = function () {\n  var _ref2 = _asyncToGenerator(function* (givenConfig) {\n    var config = Object.assign({}, givenConfig);\n    if (config.username && typeof config.username !== 'string') {\n      throw new Error('config.username must be a valid string');\n    }\n    if (typeof config.host !== 'undefined') {\n      if (typeof config.host !== 'string' || !config.host) {\n        throw new Error('config.host must be a valid string');\n      }\n    } else if (typeof config.sock !== 'undefined') {\n      if (!config.sock || _typeof(config.sock) !== 'object') {\n        throw new Error('config.sock must be a valid object');\n      }\n    } else {\n      throw new Error('config.host or config.sock must be provided');\n    }\n    if (config.privateKey) {\n      var privateKey = config.privateKey;\n      if (typeof privateKey !== 'string') {\n        throw new Error('config.privateKey must be a string');\n      }\n      if (!(privateKey.includes('BEGIN') && privateKey.includes('KEY'))) {\n        try {\n          config.privateKey = yield readFile(privateKey, 'utf8');\n        } catch (error) {\n          if (error.code === 'ENOENT') {\n            throw new Error('config.privateKey does not exist at ' + privateKey);\n          }\n          throw error;\n        }\n      }\n    } else if (config.password) {\n      var password = config.password;\n      if (typeof password !== 'string') {\n        throw new Error('config.password must be a string');\n      }\n    }\n    return config;\n  });\n\n  return function normalizeConfig(_x3) {\n    return _ref2.apply(this, arguments);\n  };\n}();\n\nexports.exists = exists;\nexports.normalizePutDirectoryConfig = normalizePutDirectoryConfig;\nexports.generateCallback = generateCallback;\n\nvar _fs = require('fs');\n\nvar _fs2 = _interopRequireDefault(_fs);\n\nvar _path = require('path');\n\nvar _path2 = _interopRequireDefault(_path);\n\nvar _sbPromisify = require('sb-promisify');\n\nvar _sbPromisify2 = _interopRequireDefault(_sbPromisify);\n\nfunction _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }\n\nfunction _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step(\"next\", value); }, function (err) { step(\"throw\", err); }); } } return step(\"next\"); }); }; }\n\nvar CODE_REGEXP = /Error: (E[\\S]+): /;\nvar readFile = (0, _sbPromisify2.default)(_fs2.default.readFile);\nvar stat = exports.stat = (0, _sbPromisify2.default)(_fs2.default.stat);\nvar readdir = exports.readdir = (0, _sbPromisify2.default)(_fs2.default.readdir);\n\nfunction transformError(givenError) {\n  var code = CODE_REGEXP.exec(givenError);\n  if (code) {\n    // eslint-disable-next-line no-param-reassign\n    givenError.code = code[1];\n  }\n  return givenError;\n}\n\nfunction exists(filePath) {\n  return new Promise(function (resolve) {\n    _fs2.default.access(filePath, _fs2.default.R_OK, function (error) {\n      resolve(!error);\n    });\n  });\n}\n\nfunction normalizePutDirectoryConfig(givenConfig) {\n  var config = Object.assign({}, givenConfig);\n  if (config.tick) {\n    if (typeof config.tick !== 'function') {\n      throw new Error('config.tick must be a function');\n    }\n  } else {\n    config.tick = function () {};\n  }\n  if (config.validate) {\n    if (typeof config.validate !== 'function') {\n      throw new Error('config.validate must be a function');\n    }\n  } else {\n    config.validate = function (path) {\n      return _path2.default.basename(path).substr(0, 1) !== '.';\n    };\n  }\n  config.recursive = {}.hasOwnProperty.call(config, 'recursive') ? !!config.recursive : true;\n  return config;\n}\n\nfunction generateCallback(resolve, reject) {\n  return function (error, result) {\n    if (error) {\n      reject(error);\n    } else {\n      resolve(result);\n    }\n  };\n}","/home/travis/build/npmtest/node-npmtest-node-ssh/node_modules/node-ssh/lib/types.js":"\"use strict\";"}